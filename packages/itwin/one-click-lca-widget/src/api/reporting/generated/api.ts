/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Reporting
 * Insights is a resource for aggregating iTwin data to build custom dashboards and integrate iTwin data with your business applications.    - Create digitial twin based reports which can be consumed through business intelligence applications such as Power BI.  - Leverage the OData feed Data Access to generate reports by combining data from multiple data streams in the digital twin.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/insights/reporting".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}
/**
 * Defines a unit of data that can be exposed as an OData feed. The contents of a Report are defined in Report Mappings.
 * @export
 * @interface ReportReportingAPI
 */
export interface ReportReportingAPI {
  /**
   * The Report Id.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  id?: string;
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  description?: string;
  /**
   * Flag indicating whether or not a Report has been marked for deletion.
   * @type {boolean}
   * @memberof ReportReportingAPI
   */
  deleted?: boolean;
  /**
   *
   * @type {ReportLinksReportingAPI}
   * @memberof ReportReportingAPI
   */
  _links?: ReportLinksReportingAPI;
}

/**
 * ReportsApi - fetch parameter creator
 * @export
 */
export const ReportsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getProjectReports."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProjectReports."
        );
      }
      const localVarPath = `/reports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (deleted !== undefined) {
        localVarQueryParameter["deleted"] = deleted;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportCollectionReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
  /**
   * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Project Reports
   * @param {string} projectId The Project Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getProjectReports(
    projectId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    deleted?: boolean,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getProjectReports(
      projectId,
      Authorization,
      top,
      continuationToken,
      deleted,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
