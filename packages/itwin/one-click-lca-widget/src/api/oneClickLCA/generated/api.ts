/* eslint-disable */
//@ts-nocheck
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Carbon Calculation
 * Access carbon footprint calculation from imodels report data.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/insights/carbon-calculation".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * Contains error information and an optional array of more specific errors.
 * @export
 * @interface ErrorCarbonCalculationAPI
 */
export interface ErrorCarbonCalculationAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorCarbonCalculationAPI
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorCarbonCalculationAPI
   */
  message: string;
  /**
   * Optional array of more specific errors.
   * @type {Array<ErrorDetailsCarbonCalculationAPI>}
   * @memberof ErrorCarbonCalculationAPI
   */
  details?: Array<ErrorDetailsCarbonCalculationAPI>;
}

/**
 * Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.
 * @export
 * @interface ErrorContainerCarbonCalculationAPI
 */
export interface ErrorContainerCarbonCalculationAPI {
  /**
   *
   * @type {Error}
   * @memberof ErrorContainerCarbonCalculationAPI
   */
  error: Error;
}
/**
 * Contains error information.
 * @export
 * @interface ErrorDetailsCarbonCalculationAPI
 */
export interface ErrorDetailsCarbonCalculationAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorDetailsCarbonCalculationAPI
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorDetailsCarbonCalculationAPI
   */
  message: string;
}
/**
 * Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.
 * @export
 * @interface ErrorResponseCarbonCalculationAPI
 */
export interface ErrorResponseCarbonCalculationAPI {
  /**
   *
   * @type {Error}
   * @memberof ErrorResponseCarbonCalculationAPI
   */
  error: Error;
}
/**
 * Properties of One Click LCA job to be created.
 * @export
 * @interface JobCreateCarbonCalculationAPI
 */
export interface JobCreateCarbonCalculationAPI {
  /**
   * Report identifier used to upload report data to One Click LCA.
   * @type {string}
   * @memberof JobCreateCarbonCalculationAPI
   */
  reportId: string;
  /**
   * One Click LCA token. To get this token need to register on One Click LCA website: https://oneclicklcaapp.com/. After an account is created in One Click LCA you have to send POST request to the endpoint: https://www.oneclicklcaapp.com/app/api/login. The request should contain a JSON body with a username and password.
   * @type {string}
   * @memberof JobCreateCarbonCalculationAPI
   */
  token: string;
}
/**
 * Representation of One Click LCA job.
 * @export
 * @interface JobCreationCarbonCalculationAPI
 */
export interface JobCreationCarbonCalculationAPI {
  /**
   * One Click LCA job id.
   * @type {string}
   * @memberof JobCreationCarbonCalculationAPI
   */
  id?: string;
  /**
   *
   * @type {JobLinksCarbonCalculationAPI}
   * @memberof JobCreationCarbonCalculationAPI
   */
  _links?: JobLinksCarbonCalculationAPI;
}
/**
 * Container for One Click LCA job object.
 * @export
 * @interface JobCreationResponseCarbonCalculationAPI
 */
export interface JobCreationResponseCarbonCalculationAPI {
  /**
   *
   * @type {JobCreationCarbonCalculationAPI}
   * @memberof JobCreationResponseCarbonCalculationAPI
   */
  job?: JobCreationCarbonCalculationAPI;
}
/**
 * URLs for getting related data.
 * @export
 * @interface JobLinksCarbonCalculationAPI
 */
export interface JobLinksCarbonCalculationAPI {
  /**
   *
   * @type {LinkCarbonCalculationAPI}
   * @memberof JobLinksCarbonCalculationAPI
   */
  report?: LinkCarbonCalculationAPI;
  /**
   *
   * @type {LinkCarbonCalculationAPI}
   * @memberof JobLinksCarbonCalculationAPI
   */
  job?: LinkCarbonCalculationAPI;
}
/**
 * Representation of One Click LCA job status.
 * @export
 * @interface JobStatusCarbonCalculationAPI
 */
export interface JobStatusCarbonCalculationAPI {
  /**
   * Globally Unique Identifier of the One Click LCA job.
   * @type {string}
   * @memberof JobStatusCarbonCalculationAPI
   */
  id?: string;
  /**
   * Unique Identifier used in One Click LCA webpage to reach uploaded report data.
   * @type {string}
   * @memberof JobStatusCarbonCalculationAPI
   */
  fileToken?: string;
  /**
   * Indicates state of the One Click LCA job.
   * @type {string}
   * @memberof JobStatusCarbonCalculationAPI
   */
  status?: string;
  /**
   *
   * @type {JobStatusLinksCarbonCalculationAPI}
   * @memberof JobStatusCarbonCalculationAPI
   */
  _links?: JobStatusLinksCarbonCalculationAPI;
}
/**
 * URLs for getting related data.
 * @export
 * @interface JobStatusLinksCarbonCalculationAPI
 */
export interface JobStatusLinksCarbonCalculationAPI {
  /**
   *
   * @type {LinkCarbonCalculationAPI}
   * @memberof JobStatusLinksCarbonCalculationAPI
   */
  report?: LinkCarbonCalculationAPI;
  /**
   *
   * @type {LinkCarbonCalculationAPI}
   * @memberof JobStatusLinksCarbonCalculationAPI
   */
  oneclicklca?: LinkCarbonCalculationAPI;
}
/**
 * Container for One Click LCA job object.
 * @export
 * @interface JobStatusResponseCarbonCalculationAPI
 */
export interface JobStatusResponseCarbonCalculationAPI {
  /**
   *
   * @type {JobStatusCarbonCalculationAPI}
   * @memberof JobStatusResponseCarbonCalculationAPI
   */
  job?: JobStatusCarbonCalculationAPI;
}
/**
 * Hyperlink container.
 * @export
 * @interface LinkCarbonCalculationAPI
 */
export interface LinkCarbonCalculationAPI {
  /**
   * Hyperlink to the specific entity.
   * @type {string}
   * @memberof LinkCarbonCalculationAPI
   */
  href?: string;
}
/**
 * OneClickLCAApi - fetch parameter creator
 * @export
 */
export const OneClickLCAApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Uploads report data to One Click LCA.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create One Click LCA job
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {JobCreateCarbonCalculationAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneclicklcaJob(
      Authorization: string,
      body?: JobCreateCarbonCalculationAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createOneclicklcaJob."
        );
      }
      const localVarPath = `/oneclicklca/jobs`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"JobCreateCarbonCalculationAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Queries One Click LCA job status.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get One Click LCA job status
     * @param {string} jobId The Job Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneclicklcaJobStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'jobId' is not null or undefined
      if (jobId === null || jobId === undefined) {
        throw new RequiredError(
          "jobId",
          "Required parameter jobId was null or undefined when calling getOneclicklcaJobStatus."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getOneclicklcaJobStatus."
        );
      }
      const localVarPath = `/oneclicklca/jobs/{jobId}`.replace(
        `{${"jobId"}}`,
        encodeURIComponent(String(jobId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OneClickLCAApi - functional programming interface
 * @export
 */
export const OneClickLCAApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Uploads report data to One Click LCA.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create One Click LCA job
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {JobCreateCarbonCalculationAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneclicklcaJob(
      Authorization: string,
      body?: JobCreateCarbonCalculationAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<JobCreationResponseCarbonCalculationAPI> {
      const localVarFetchArgs = OneClickLCAApiFetchParamCreator(
        configuration
      ).createOneclicklcaJob(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Queries One Click LCA job status.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get One Click LCA job status
     * @param {string} jobId The Job Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneclicklcaJobStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<JobStatusResponseCarbonCalculationAPI> {
      const localVarFetchArgs = OneClickLCAApiFetchParamCreator(
        configuration
      ).getOneclicklcaJobStatus(jobId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * OneClickLCAApi - factory interface
 * @export
 */
export const OneClickLCAApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Uploads report data to One Click LCA.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Create One Click LCA job
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {JobCreateCarbonCalculationAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneclicklcaJob(
      Authorization: string,
      body?: JobCreateCarbonCalculationAPI,
      Accept?: string,
      options?: any
    ) {
      return OneClickLCAApiFp(configuration).createOneclicklcaJob(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Queries One Click LCA job status.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
     * @summary Get One Click LCA job status
     * @param {string} jobId The Job Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneclicklcaJobStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return OneClickLCAApiFp(configuration).getOneclicklcaJobStatus(
        jobId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * OneClickLCAApi - object-oriented interface
 * @export
 * @class OneClickLCAApi
 * @extends {BaseAPI}
 */
export class OneClickLCAApi extends BaseAPI {
  /**
   * ---    Uploads report data to One Click LCA.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Create One Click LCA job
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {JobCreateCarbonCalculationAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OneClickLCAApi
   */
  public createOneclicklcaJob(
    Authorization: string,
    body?: JobCreateCarbonCalculationAPI,
    Accept?: string,
    options?: any
  ) {
    return OneClickLCAApiFp(this.configuration).createOneclicklcaJob(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Queries One Click LCA job status.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level.     Alternatively the user should be an Organization Administrator for the Organization that owns a given Project.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ---
   * @summary Get One Click LCA job status
   * @param {string} jobId The Job Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OneClickLCAApi
   */
  public getOneclicklcaJobStatus(
    jobId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return OneClickLCAApiFp(this.configuration).getOneclicklcaJobStatus(
      jobId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
